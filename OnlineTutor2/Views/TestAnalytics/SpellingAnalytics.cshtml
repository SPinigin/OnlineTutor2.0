@model OnlineTutor2.ViewModels.SpellingTestAnalyticsViewModel
@{
    ViewData["Title"] = $"Аналитика теста: {Model.Test.Title}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-controller="Test" asp-action="Category" asp-route-id="1">Тесты на правописание</a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-controller="SpellingTest" asp-action="Details" asp-route-id="@Model.Test.Id">@Model.Test.Title</a>
                </li>
                <li class="breadcrumb-item active">Аналитика</li>
            </ol>
        </nav>
        <h2><i class="fas fa-chart-bar text-primary"></i> Аналитика теста на правописание</h2>
        <p class="text-muted">Детальный анализ результатов и статистика прохождения</p>
    </div>
    <div>
        <a asp-controller="SpellingTest" asp-action="Details" asp-route-id="@Model.Test.Id" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Назад к тесту
        </a>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-2">
        <div class="card text-center border-primary">
            <div class="card-body">
                <i class="fas fa-users text-primary" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-primary">@Model.Statistics.TotalStudents</h4>
                <small class="text-muted">Всего учеников</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-success">
            <div class="card-body">
                <i class="fas fa-check-circle text-success" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-success">@Model.Statistics.StudentsCompleted</h4>
                <small class="text-muted">Завершили</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-warning">
            <div class="card-body">
                <i class="fas fa-clock text-warning" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-warning">@Model.Statistics.StudentsInProgress</h4>
                <small class="text-muted">В процессе</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-danger">
            <div class="card-body">
                <i class="fas fa-times-circle text-danger" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-danger">@Model.Statistics.StudentsNotStarted</h4>
                <small class="text-muted">Не начали</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-info">
            <div class="card-body">
                <i class="fas fa-percentage text-info" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-info">@Model.Statistics.AveragePercentage.ToString("F1")%</h4>
                <small class="text-muted">Средний результат</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-secondary">
            <div class="card-body">
                <i class="fas fa-stopwatch text-secondary" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-secondary">@($"{Model.Statistics.AverageCompletionTime.Minutes:D2}:{Model.Statistics.AverageCompletionTime.Seconds:D2}")</h4>
                <small class="text-muted">Среднее время</small>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4 border-1 shadow-sm">
    <div class="card-header bg-white border-0 py-3">
        <h6 class="mb-0 text-primary">
            <i class="fas fa-info-circle me-2"></i>Информация о тесте
        </h6>
    </div>
    <div class="card-body py-3">
        <div class="row">
            
            <div class="col-md-4">
                <div class="info-column">
                    <div class="test-info-item mb-2">
                        <i class="fas fa-spell-check text-primary"></i>
                        <span class="info-label">Тест на правописание</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Test.Description))
                    {
                        <p class="text-muted mb-0 small">@Model.Test.Description</p>
                    }
                </div>
            </div>

            <div class="col-md-4">
                <div class="info-column">
                    <div class="test-info-item mb-2">
                        <i class="fas fa-list text-info"></i>
                        <span class="info-label">Количество вопросов: </span>
                        <span class="info-value">@Model.Test.Questions.Count</span>
                    </div>
                    <div class="test-info-item mb-2">
                        <i class="fas fa-clock text-warning"></i>
                        <span class="info-label">Время на выполнение: </span>
                        <span class="info-value">@Model.Test.TimeLimit</span>
                        <span class="info-label">минут</span>
                    </div>
                    <div class="test-info-item">
                        <i class="fas fa-redo text-secondary"></i>
                        <span class="info-label">Количество попыток:</span>
                        <span class="info-value">@Model.Test.MaxAttempts</span>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="info-column">
                     <h6 class="test-info-item mb-2">
                        <i class="fas fa-cog me-2"></i>Настройки:
                    </h6>
                    <div class="mb-2">
                        @if (Model.Test.ShowHints)
                        {
                            <span class="setting-tag setting-enabled">
                                <i class="fas fa-lightbulb"></i> Подсказки
                            </span>
                        }
                        else
                        {
                            <span class="setting-tag setting-disabled">
                                <i class="fas fa-lightbulb"></i> Подсказки
                            </span>
                        }
                        
                        @if (Model.Test.ShowCorrectAnswers)
                        {
                            <span class="setting-tag setting-enabled">
                                <i class="fas fa-check"></i> Показ ответов
                            </span>
                        }
                        else
                        {
                            <span class="setting-tag setting-disabled">
                                <i class="fas fa-check"></i> Показ ответов
                            </span>
                        }
                    </div>

                    @if (Model.Test.StartDate.HasValue || Model.Test.EndDate.HasValue)
                    {
                        <div>
                            @if (Model.Test.StartDate.HasValue)
                            {
                                <div class="date-info mb-1">
                                    <i class="fas fa-play text-success"></i>
                                    <span class="small">@Model.Test.StartDate.Value.ToString("dd.MM.yyyy HH:mm")</span>
                                </div>
                            }
                            @if (Model.Test.EndDate.HasValue)
                            {
                                <div class="date-info">
                                    <i class="fas fa-stop text-danger"></i>
                                    <span class="small">@Model.Test.EndDate.Value.ToString("dd.MM.yyyy HH:mm")</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs" id="analyticsTabsNav" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab">
            <i class="fas fa-chart-pie"></i> Общая информация
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="students-tab" data-bs-toggle="tab" data-bs-target="#students" type="button" role="tab">
            <i class="fas fa-users"></i> Детальная информация (@Model.StudentResults.Count)
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions" type="button" role="tab">
            <i class="fas fa-spell-check"></i> Анализ теста (@Model.QuestionAnalytics.Count)
        </button>
    </li>
</ul>

<div class="tab-content" id="analyticsTabsContent">

    <div class="tab-pane fade show active" id="overview" role="tabpanel">
        <div class="row mt-4">

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-chart-bar"></i> Распределение результатов</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var grade in Model.Statistics.GradeDistribution)
                        {
                            var percentage = Model.Statistics.StudentsCompleted > 0
                            ? Math.Round((double)grade.Value / Model.Statistics.StudentsCompleted * 100, 1)
                            : 0;
                            var colorClass = grade.Key.Contains("Отлично") ? "success" :
                            grade.Key.Contains("Хорошо") ? "info" :
                            grade.Key.Contains("Удовлетворительно") ? "warning" : "danger";

                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span>@grade.Key</span>
                                    <span><strong>@grade.Value</strong> (@percentage%)</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar bg-@colorClass" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-info-circle"></i> Детальная статистика</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Statistics.StudentsCompleted > 0)
                        {
                            <dl class="row">
                                <dt class="col-sm-6">Лучший результат:</dt>
                                <dd class="col-sm-6">@Model.Statistics.HighestScore/@Model.Test.Questions.Sum(q => q.Points) баллов</dd>

                                <dt class="col-sm-6">Худший результат:</dt>
                                <dd class="col-sm-6">@Model.Statistics.LowestScore/@Model.Test.Questions.Sum(q => q.Points) баллов</dd>

                                <dt class="col-sm-6">Средний балл:</dt>
                                <dd class="col-sm-6">@Model.Statistics.AverageScore.ToString("F1") баллов</dd>

                                @if (Model.Statistics.FirstCompletion.HasValue)
                                {
                                    <dt class="col-sm-6">Первое прохождение:</dt>
                                    <dd class="col-sm-6">@Model.Statistics.FirstCompletion.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                                }

                                @if (Model.Statistics.LastCompletion.HasValue)
                                {
                                    <dt class="col-sm-6">Последнее прохождение:</dt>
                                    <dd class="col-sm-6">@Model.Statistics.LastCompletion.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                                }
                            </dl>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-chart-line text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">Пока нет завершенных попыток</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="students" role="tabpanel">
        <div class="card mt-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-users"></i> Результаты учеников</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Ученик</th>
                                <th>Статус</th>
                                <th>Попыток</th>
                                <th>Лучший результат</th>
                                <th>Последний результат</th>
                                <th>Время</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var studentResult in Model.StudentResults)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-user-graduate text-muted me-2"></i>
                                            <div>
                                                <strong>@studentResult.Student.User.FullName</strong>
                                                @if (!string.IsNullOrEmpty(studentResult.Student.School))
                                                {
                                                    <br>
                                                    <small class="text-muted">@studentResult.Student.School</small>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @if (studentResult.HasCompleted)
                                        {
                                            <span class="badge bg-success">Завершил</span>
                                        }
                                        else if (studentResult.IsInProgress)
                                        {
                                            <span class="badge bg-warning">В процессе</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Не начал</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-info">
                                            @studentResult.AttemptsUsed/@Model.Test.MaxAttempts
                                        </span>
                                    </td>
                                    <td>
                                        @if (studentResult.BestResult != null)
                                        {
                                            var bestGrade = GetGradeFromPercentage(studentResult.BestResult.Percentage);
                                            var bestGradeColor = GetGradeColor(bestGrade);

                                            <div class="result-display">
                                                <div class="d-flex align-items-center gap-2">
                                                    <span class="badge bg-@(studentResult.BestResult.Percentage >= 80 ? "success" : studentResult.BestResult.Percentage >= 60 ? "warning" : "danger")">
                                                        @studentResult.BestResult.Percentage.ToString("F1")%
                                                    </span>
                                                    <span class="grade-badge grade-@bestGradeColor">
                                                        @bestGrade
                                                    </span>
                                                </div>
                                                <small class="text-muted">
                                                    @studentResult.BestResult.Score/@studentResult.BestResult.MaxScore баллов
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.LatestResult != null)
                                        {
                                            var latestGrade = GetGradeFromPercentage(studentResult.LatestResult.Percentage);
                                            var latestGradeColor = GetGradeColor(latestGrade);

                                            <div class="result-display">
                                                <div class="d-flex align-items-center gap-2">
                                                    <span class="badge bg-@(studentResult.LatestResult.Percentage >= 80 ? "success" : studentResult.LatestResult.Percentage >= 60 ? "warning" : "danger")">
                                                        @studentResult.LatestResult.Percentage.ToString("F1")%
                                                    </span>
                                                    <span class="grade-badge grade-@latestGradeColor">
                                                        @latestGrade
                                                    </span>
                                                </div>
                                                <small class="text-muted d-block">
                                                    @studentResult.LatestResult.Score/@studentResult.LatestResult.MaxScore баллов
                                                </small>
                                                <small class="text-muted">
                                                    @studentResult.LatestResult.CompletedAt?.ToString("dd.MM.yyyy")
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.TotalTimeSpent.HasValue)
                                        {
                                            <span>@($"{studentResult.TotalTimeSpent.Value.Minutes:D2}:{studentResult.TotalTimeSpent.Value.Seconds:D2}")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.Results.Any())
                                        {
                                            <button type="button" class="btn btn-outline-info btn-sm"
                                                    onclick="showStudentDetails(@studentResult.Student.Id, '@studentResult.Student.User.FullName')">
                                                <i class="fas fa-eye"></i> Детали
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="questions" role="tabpanel">
        <div class="mt-4">
            @foreach (var qa in Model.QuestionAnalytics)
            {
                var questionIndex = Model.QuestionAnalytics.IndexOf(qa) + 1;

                <div class="card mb-3 border-0 shadow-sm @(qa.IsMostDifficult ? "border-start border-danger border-3" : qa.IsEasiest ? "border-start border-success border-3" : "")">
                
                    <div class="card-header bg-transparent border-0 py-3">
                        <div class="row align-items-center">
                            <div class="col">
                                <div class="d-flex align-items-center gap-3">
                                    <span class="badge bg-primary fs-6 px-3 py-2">@questionIndex</span>
                                    <div>
                                        <h6 class="mb-1 fw-bold text-primary">@qa.Question.WordWithGap</h6>
                                        <small class="text-muted">
                                            @qa.Question.CorrectLetter → @qa.Question.FullWord (@qa.Question.Points б.)
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="text-end">
                                    @if (qa.TotalAnswers > 0)
                                    {
                                        <div class="h4 mb-0 text-@(qa.SuccessRate >= 80 ? "success" : qa.SuccessRate >= 60 ? "warning" : "danger")">
                                            @qa.SuccessRate.ToString("F0")%
                                        </div>
                                        <small class="text-muted">@qa.CorrectAnswers/@qa.TotalAnswers</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">—</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                
                    @if (!string.IsNullOrEmpty(qa.Question.Hint))
                    {
                        <div class="card-body py-2 bg-light">
                            <small class="text-muted">
                                <i class="fas fa-lightbulb me-1"></i>@qa.Question.Hint
                            </small>
                        </div>
                    }
                
                   @if (qa.CommonMistakes.Any())
                    {
                        <div class="card-body pt-2">
                            <div class="row g-2">
                                @foreach (var mistake in qa.CommonMistakes.Take(4))
                                {
                                    <div class="col-md-6">
                                        <div class="p-2 bg-light rounded border-start border-danger border-2">
                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                <span class="fw-bold text-danger">"@mistake.IncorrectAnswer"</span>
                                                <small class="badge bg-danger">@mistake.Count</small>
                                            </div>
                        
                                            <div class="students-minimal">
                                                @foreach (var name in mistake.StudentNames)
                                                {
                                                    <span class="student-tag">@name</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            @if (qa.CommonMistakes.Count > 4)
                            {
                                <div class="text-center mt-2">
                                    <small class="text-muted">и еще @(qa.CommonMistakes.Count - 4) вариантов ошибок</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="studentDetailsModal" tabindex="-1" aria-labelledby="studentModalName" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentModalName">
                    <i class="fas fa-user-graduate text-primary"></i>
                    Детальная информация об ученике
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">

                <div id="studentModalLoading" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                    <p class="mt-2 text-muted">Загрузка данных...</p>
                </div>

                <div id="studentModalContent" style="display: none;">

                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6 class="text-primary border-bottom pb-1">
                                <i class="fas fa-info-circle"></i> Общая информация
                            </h6>
                            <dl class="row">
                                <dt class="col-sm-4">Ученик:</dt>
                                <dd class="col-sm-8" id="studentFullName">-</dd>
                                <dt class="col-sm-4">Школа:</dt>
                                <dd class="col-sm-8" id="studentSchool">-</dd>
                                <dt class="col-sm-4">Класс:</dt>
                                <dd class="col-sm-8" id="studentClass">-</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-success border-bottom pb-1">
                                <i class="fas fa-chart-line"></i> Статистика по тесту
                            </h6>
                            <dl class="row">
                                <dt class="col-sm-5">Попыток:</dt>
                                <dd class="col-sm-7" id="studentAttempts">-</dd>
                                <dt class="col-sm-5">Лучший результат:</dt>
                                <dd class="col-sm-7" id="studentBestResult">-</dd>
                                <dt class="col-sm-5">Всего времени:</dt>
                                <dd class="col-sm-7" id="studentTotalTime">-</dd>
                            </dl>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-info border-bottom pb-1">
                            <i class="fas fa-list-alt"></i> История попыток
                        </h6>
                        <div id="studentAttemptsList">
                        </div>
                    </div>

                    <div>
                        <h6 class="text-warning border-bottom pb-1">
                            <i class="fas fa-exclamation-triangle"></i> Анализ ошибок
                        </h6>
                        <div id="studentMistakes">
                        </div>
                    </div>
                </div>

                <div id="studentModalError" style="display: none;" class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span id="studentErrorMessage">Произошла ошибка при загрузке данных</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Закрыть
                </button>
            </div>
        </div>
    </div>
</div>


@functions {
    int GetGradeFromPercentage(double percentage)
    {
        if (percentage >= 91) return 5;
        if (percentage >= 76) return 4;
        if (percentage >= 61) return 3;
        return 2;
    }

    string GetGradeColor(int grade)
    {
        return grade switch
        {
            5 => "excellent",
            4 => "good",
            3 => "satisfactory",
            2 => "unsatisfactory",
            _ => "unsatisfactory"
        };
    }
}

@section Scripts {
    <script src="~/js/layout.js" asp-append-version="true"></script>

    <script>
        function showStudentDetails(studentId, studentName) {
            console.log('Opening modal for student:', studentName, 'ID:', studentId);

            // Сброс состояния модального окна
            resetModalState();

            // Устанавливаем имя ученика в заголовок
            const nameElement = document.getElementById('studentModalName');
            if (nameElement) {
                nameElement.textContent = studentName;
            }

            // Показываем загрузку
            showLoading();

            // Простое открытие модального окна через jQuery/Bootstrap
            $('#studentDetailsModal').modal('show');

            // Загружаем данные ученика
            loadStudentDetails(studentId, @Model.Test.Id);
        }

        // Обработчик закрытия модального окна (один раз при загрузке страницы)
        $(document).ready(function() {
            const modal = $('#studentDetailsModal');

            // Обработчик при показе модального окна
            modal.on('shown.bs.modal', function () {
                // Убираем фокус с любых элементов внутри модального окна
                $(this).find('button, input, select, textarea').blur();
                // Устанавливаем фокус на само модальное окно
                $(this).focus();
            });

            // Обработчик при скрытии модального окна
            modal.on('hide.bs.modal', function () {
                // Убираем фокус со всех элементов внутри модального окна
                $(this).find('button, input, select, textarea').blur();
                // Возвращаем фокус на body
                $('body').focus();
            });

            // Обработчик после полного закрытия модального окна
            modal.on('hidden.bs.modal', function () {
                console.log('Modal closed, resetting state');
                resetModalState();
                // Дополнительно убираем фокус
                $(this).find('*').blur();
                $('body').focus();
            });
        });

        function resetModalState() {
            console.log('Resetting modal state');

            // Убираем фокус со всех элементов модального окна перед сбросом
            $('#studentDetailsModal').find('button, input, select, textarea').blur();

            // Список элементов для сброса видимости
            const visibilityElements = [
                'studentModalLoading',
                'studentModalContent',
                'studentModalError'
            ];

            visibilityElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.style.display = 'none';
                } else {
                    console.warn(`Element with ID '${id}' not found`);
                }
            });

            // Список элементов для очистки текста
            const textElements = {
                'studentModalName': 'Детальная информация об ученике',
                'studentFullName': '-',
                'studentSchool': '-',
                'studentClass': '-',
                'studentAttempts': '-',
                'studentTotalTime': '-',
                'studentErrorMessage': 'Произошла ошибка при загрузке данных'
            };

            Object.entries(textElements).forEach(([id, defaultText]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = defaultText;
                }
            });

            // Элементы для очистки HTML
            const htmlElements = [
                'studentBestResult',
                'studentAttemptsList',
                'studentMistakes'
            ];

            htmlElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    if (id === 'studentBestResult') {
                        element.innerHTML = '-';
                    } else {
                        element.innerHTML = '';
                    }
                }
            });
        }

        function showLoading() {
            const loadingElement = document.getElementById('studentModalLoading');
            const contentElement = document.getElementById('studentModalContent');
            const errorElement = document.getElementById('studentModalError');

            if (loadingElement) loadingElement.style.display = 'block';
            if (contentElement) contentElement.style.display = 'none';
            if (errorElement) errorElement.style.display = 'none';
        }

        function loadStudentDetails(studentId, testId) {
            console.log('Loading student details for:', studentId, 'test:', testId);

            fetch(`/TestAnalytics/GetStudentDetails?studentId=${studentId}&testId=${testId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: Ошибка загрузки данных`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Data received:', data);
                displayStudentDetails(data);
            })
            .catch(error => {
                console.error('Error loading student details:', error);
                showError(error.message);
            });
        }

        function displayStudentDetails(data) {
            console.log('Displaying student details');

            // Скрываем загрузку
            const loadingElement = document.getElementById('studentModalLoading');
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }

            // Заполняем общую информацию
            const setTextContent = (id, value) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                }
            };

            setTextContent('studentFullName', data.fullName || 'Не указано');
            setTextContent('studentSchool', data.school || 'Не указано');
            setTextContent('studentClass', data.className || 'Не указан');
            setTextContent('studentAttempts', `${data.attemptsUsed || 0}/${data.maxAttempts || 0}`);
            setTextContent('studentTotalTime', data.totalTimeSpent || 'Не определено');

            // Заполняем лучший результат
            const bestResultElement = document.getElementById('studentBestResult');
            if (bestResultElement) {
                if (data.bestResult) {
                    const grade = getGradeFromPercentage(data.bestResult.percentage);
                    bestResultElement.innerHTML =
                        `<span class="badge bg-${getPercentageColor(data.bestResult.percentage)}">${data.bestResult.percentage.toFixed(1)}%</span>
                         <span class="grade-badge grade-${getGradeColorClass(grade)}">${grade}</span>
                         <small class="text-muted">(${data.bestResult.score}/${data.bestResult.maxScore} баллов)</small>`;
                } else {
                    bestResultElement.innerHTML = '<span class="text-muted">Нет результатов</span>';
                }
            }

            // Заполняем историю попыток
            displayAttemptsList(data.attempts || []);

            // Заполняем анализ ошибок
            displayMistakesAnalysis(data.mistakes || []);

            // Показываем контент
            const contentElement = document.getElementById('studentModalContent');
            if (contentElement) {
                contentElement.style.display = 'block';
            }
        }

        function displayAttemptsList(attempts) {
            const container = document.getElementById('studentAttemptsList');
            if (!container) {
                return;
            }

            if (!attempts || attempts.length === 0) {
                container.innerHTML = '<p class="text-muted"><i class="fas fa-info-circle"></i> Попыток пока нет</p>';
                return;
            }

            let html = '<div class="table-responsive"><table class="table table-sm table-striped">';
            html += '<thead class="table-light"><tr><th>Попытка</th><th>Результат</th><th>Баллы</th><th>Время</th><th>Дата</th></tr></thead><tbody>';

            attempts.forEach(attempt => {
                const grade = getGradeFromPercentage(attempt.percentage);
                const duration = attempt.duration || '-';
                const completedDate = attempt.completedAt ? new Date(attempt.completedAt).toLocaleDateString('ru-RU') : '-';

                html += `<tr>
                    <td><span class="badge bg-info">${attempt.attemptNumber}</span></td>
                    <td>
                        <span class="badge bg-${getPercentageColor(attempt.percentage)}">${attempt.percentage.toFixed(1)}%</span>
                        <span class="grade-badge grade-${getGradeColorClass(grade)} ms-1">${grade}</span>
                    </td>
                    <td><small>${attempt.score}/${attempt.maxScore}</small></td>
                    <td><small>${duration}</small></td>
                    <td><small>${completedDate}</small></td>
                </tr>`;
            });

            html += '</tbody></table></div>';
            container.innerHTML = html;
        }

        function displayMistakesAnalysis(mistakes) {
            const container = document.getElementById('studentMistakes');
            if (!container) {
                return;
            }

            if (!mistakes || mistakes.length === 0) {
                container.innerHTML = '<p class="text-success"><i class="fas fa-check-circle"></i> Ошибок не найдено! Отличная работа!</p>';
                return;
            }

            let html = '<div class="row g-2">';

            mistakes.forEach(mistake => {
                html += `<div class="col-md-6 mb-2">
                    <div class="p-2 bg-light rounded border-start border-danger border-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold text-danger">"${mistake.incorrectAnswer || 'Пусто'}"</span>
                            <small class="badge bg-danger">${mistake.count}</small>
                        </div>
                        <div class="mt-1">
                            <small class="text-muted d-block">Правильно: <strong class="text-success">${mistake.correctAnswer}</strong></small>
                            <small class="text-muted">Слово: ${mistake.fullWord}</small>
                        </div>
                    </div>
                </div>`;
            });

            html += '</div>';
            container.innerHTML = html;
        }

        function showError(message) {
            console.log('Showing error:', message);

            const loadingElement = document.getElementById('studentModalLoading');
            const contentElement = document.getElementById('studentModalContent');
            const errorElement = document.getElementById('studentModalError');
            const errorMessageElement = document.getElementById('studentErrorMessage');

            if (loadingElement) loadingElement.style.display = 'none';
            if (contentElement) contentElement.style.display = 'none';
            if (errorMessageElement) errorMessageElement.textContent = message;
            if (errorElement) errorElement.style.display = 'block';
        }

        // Вспомогательные функции
        function getGradeFromPercentage(percentage) {
            if (percentage >= 91) return 5;
            if (percentage >= 76) return 4;
            if (percentage >= 51) return 3;
            return 2;
        }

        function getPercentageColor(percentage) {
            if (percentage >= 80) return 'success';
            if (percentage >= 60) return 'warning';
            return 'danger';
        }

        function getGradeColorClass(grade) {
            switch(grade) {
                case 5: return 'excellent';
                case 4: return 'good';
                case 3: return 'satisfactory';
                case 2: return 'unsatisfactory';
                default: return 'unsatisfactory';
            }
        }
    </script>
}

@section Styles {
    <style>
        .card {
            transition: transform 0.2s ease-in-out;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .border-start {
            border-left-width: 3px !important;
        }

        .word-display {
            font-size: 1.1em;
            font-weight: 600;
            color: #0d6efd;
        }

        .badge.fs-6 {
            font-size: 0.9rem !important;
        }

        .table th {
            border-top: none;
            font-weight: 600;
            color: #495057;
        }

        .card-header {
            padding-bottom: 0.75rem;
        }

        .card-body {
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
        }

        .test-info-item {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.85rem;
        }

        .test-info-item i {
            font-size: 0.9rem;
            width: 16px;
            text-align: center;
        }

        .info-value {
            font-weight: 600;
            color: #495057;
        }

        .info-label {
            color: #6c757d;
            font-size: 0.8rem;
        }

       /* Информация о тесте - 3 колонки */
        .info-column {
            padding: 0 10px;
        }

        .test-info-item {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.85rem;
        }

        .test-info-item i {
            font-size: 0.9rem;
            width: 16px;
            text-align: center;
        }

        .info-value {
            font-weight: 600;
            color: #495057;
        }

        .info-label {
            color: #6c757d;
            font-size: 0.85rem;
        }

        /* Компактные теги настроек */
        .setting-tag {
            display: inline-flex;
            align-items: center;
            gap: 3px;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 500;
            margin-right: 4px;
            margin-bottom: 2px;
        }

        .setting-enabled {
            background: #d1edff;
            color: #0066cc;
            border: 1px solid #b3d9ff;
        }

        .setting-disabled {
            background: #f8f9fa;
            color: #6c757d;
            border: 1px solid #e9ecef;
        }

        /* Информация о датах */
        .date-info {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.8rem;
            color: #6c757d;
        }

        .date-info i {
            font-size: 0.8rem;
            width: 12px;
        }

        /* Адаптивность для мобильных */
        @@media (max-width: 768px) {
            .info-column {
                padding: 10px 0;
                border-bottom: 1px solid #e9ecef;
            }
    
            .info-column:last-child {
                border-bottom: none;
            }
        }

        /* Стили для отображения результатов */
        .result-display {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 2px;
        }

            .result-display .badge {
                font-size: 0.8rem;
            }

            .result-display small {
                font-size: 0.7rem;
                line-height: 1.2;
            }

        /* Стили для оценок */
        .grade-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            font-size: 0.75rem;
            font-weight: bold;
            color: white;
        }

        .grade-excellent {
            background-color: #28a745;
        }

        .grade-good {
            background-color: #17a2b8;
        }

        .grade-satisfactory {
            background-color: #ffc107;
            color: #212529;
        }

        .grade-unsatisfactory {
            background-color: #dc3545;
        }

        /* Минималистичные теги учеников */
        .students-minimal {
            display: flex;
            flex-wrap: wrap;
            gap: 3px;
            margin-top: 4px;
        }

        .student-tag {
            display: inline-block;
            background: #f8f9fa;
            color: #6c757d;
            padding: 1px 6px;
            border-radius: 8px;
            font-size: 0.9rem;
            line-height: 1.2;
            border: 1px solid #e9ecef;
        }
    </style>
}
