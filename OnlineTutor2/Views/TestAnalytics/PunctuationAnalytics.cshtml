@model OnlineTutor2.ViewModels.PunctuationTestAnalyticsViewModel
@{
    ViewData["Title"] = $"Аналитика теста: {Model.Test.Title}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-controller="Test" asp-action="Category" asp-route-id="5">Тесты на пунктуацию</a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-controller="PunctuationTest" asp-action="Details" asp-route-id="@Model.Test.Id">@Model.Test.Title</a>
                </li>
                <li class="breadcrumb-item active">Аналитика</li>
            </ol>
        </nav>
        <h2><i class="fas fa-chart-bar text-warning"></i> Аналитика теста на пунктуацию</h2>
        <p class="text-muted">Детальный анализ результатов и статистика прохождения</p>
    </div>
    <div>
        <a asp-controller="PunctuationTest" asp-action="Details" asp-route-id="@Model.Test.Id" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Назад к тесту
        </a>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-2">
        <div class="card text-center border-primary">
            <div class="card-body">
                <i class="fas fa-users text-primary" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-primary">@Model.Statistics.TotalStudents</h4>
                <small class="text-muted">Всего учеников</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-success">
            <div class="card-body">
                <i class="fas fa-check-circle text-success" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-success">@Model.Statistics.StudentsCompleted</h4>
                <small class="text-muted">Завершили</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-warning">
            <div class="card-body">
                <i class="fas fa-clock text-warning" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-warning">@Model.Statistics.StudentsInProgress</h4>
                <small class="text-muted">В процессе</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-danger">
            <div class="card-body">
                <i class="fas fa-times-circle text-danger" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-danger">@Model.Statistics.StudentsNotStarted</h4>
                <small class="text-muted">Не начали</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-info">
            <div class="card-body">
                <i class="fas fa-percentage text-info" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-info">@Model.Statistics.AveragePercentage.ToString("F1")%</h4>
                <small class="text-muted">Ср. результат</small>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border-secondary">
            <div class="card-body">
                <i class="fas fa-stopwatch text-secondary" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-secondary">@($"{Model.Statistics.AverageCompletionTime.Minutes:D2}:{Model.Statistics.AverageCompletionTime.Seconds:D2}")</h4>
                <small class="text-muted">Ср. время</small>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4 border-1 shadow-sm">
    <div class="card-header bg-white border-0 py-3">
        <h6 class="mb-0 text-warning">
            <i class="fas fa-info-circle me-2"></i>Информация о тесте
        </h6>
    </div>
    <div class="card-body py-3">
        <div class="row">
            <div class="col-md-4">
                <div class="info-column">
                    <div class="test-info-item mb-2">
                        <i class="fas fa-exclamation text-warning"></i>
                        <span class="info-label">Тест на пунктуацию</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Test.Description))
                    {
                        <p class="text-muted mb-0 small">@Model.Test.Description</p>
                    }
                </div>
            </div>

            <div class="col-md-4">
                <div class="info-column">
                    <div class="test-info-item mb-2">
                        <i class="fas fa-list text-info"></i>
                        <span class="info-label">Количество вопросов: </span>
                        <span class="info-value">@Model.Test.Questions.Count</span>
                    </div>
                    <div class="test-info-item mb-2">
                        <i class="fas fa-clock text-warning"></i>
                        <span class="info-label">Время на выполнение: </span>
                        <span class="info-value">@Model.Test.TimeLimit</span>
                        <span class="info-label">минут</span>
                    </div>
                    <div class="test-info-item">
                        <i class="fas fa-redo text-secondary"></i>
                        <span class="info-label">Количество попыток:</span>
                        <span class="info-value">@Model.Test.MaxAttempts</span>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="info-column">
                    <h6 class="test-info-item mb-2">
                        <i class="fas fa-cog me-2"></i>Настройки:
                    </h6>
                    <div class="mb-2">
                        @if (Model.Test.ShowHints)
                        {
                            <span class="setting-tag setting-enabled">
                                <i class="fas fa-lightbulb"></i> Подсказки
                            </span>
                        }
                        else
                        {
                            <span class="setting-tag setting-disabled">
                                <i class="fas fa-lightbulb"></i> Подсказки
                            </span>
                        }

                        @if (Model.Test.ShowCorrectAnswers)
                        {
                            <span class="setting-tag setting-enabled">
                                <i class="fas fa-check"></i> Показ ответов
                            </span>
                        }
                        else
                        {
                            <span class="setting-tag setting-disabled">
                                <i class="fas fa-check"></i> Показ ответов
                            </span>
                        }
                    </div>

                    @if (Model.Test.StartDate.HasValue || Model.Test.EndDate.HasValue)
                    {
                        <div>
                            @if (Model.Test.StartDate.HasValue)
                            {
                                <div class="date-info mb-1">
                                    <i class="fas fa-play text-success"></i>
                                    <span class="small">@Model.Test.StartDate.Value.ToString("dd.MM.yyyy HH:mm")</span>
                                </div>
                            }
                            @if (Model.Test.EndDate.HasValue)
                            {
                                <div class="date-info">
                                    <i class="fas fa-stop text-danger"></i>
                                    <span class="small">@Model.Test.EndDate.Value.ToString("dd.MM.yyyy HH:mm")</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs" id="analyticsTabsNav" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab">
            <i class="fas fa-chart-pie"></i> Общая информация
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="students-tab" data-bs-toggle="tab" data-bs-target="#students" type="button" role="tab">
            <i class="fas fa-users"></i> Детальная информация (@Model.StudentResults.Count)
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions" type="button" role="tab">
            <i class="fas fa-exclamation"></i> Анализ теста (@Model.QuestionAnalytics.Count)
        </button>
    </li>
</ul>

<div class="tab-content" id="analyticsTabsContent">

    <div class="tab-pane fade show active" id="overview" role="tabpanel">
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-chart-bar"></i> Распределение результатов</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var grade in Model.Statistics.GradeDistribution)
                        {
                            var percentage = Model.Statistics.StudentsCompleted > 0
                            ? Math.Round((double)grade.Value / Model.Statistics.StudentsCompleted * 100, 1)
                            : 0;
                            var colorClass = grade.Key.Contains("Отлично") ? "success" :
                            grade.Key.Contains("Хорошо") ? "info" :
                            grade.Key.Contains("Удовлетворительно") ? "warning" : "danger";

                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span>@grade.Key</span>
                                    <span><strong>@grade.Value</strong> (@percentage%)</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar bg-@colorClass" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-info-circle"></i> Детальная статистика</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Statistics.StudentsCompleted > 0)
                        {
                            <dl class="row">
                                <dt class="col-sm-6">Лучший результат:</dt>
                                <dd class="col-sm-6">@Model.Statistics.HighestScore/@Model.Test.Questions.Sum(q => q.Points) баллов</dd>

                                <dt class="col-sm-6">Худший результат:</dt>
                                <dd class="col-sm-6">@Model.Statistics.LowestScore/@Model.Test.Questions.Sum(q => q.Points) баллов</dd>

                                <dt class="col-sm-6">Средний балл:</dt>
                                <dd class="col-sm-6">@Model.Statistics.AverageScore.ToString("F1") баллов</dd>

                                @if (Model.Statistics.FirstCompletion.HasValue)
                                {
                                    <dt class="col-sm-6">Первое прохождение:</dt>
                                    <dd class="col-sm-6">@Model.Statistics.FirstCompletion.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                                }

                                @if (Model.Statistics.LastCompletion.HasValue)
                                {
                                    <dt class="col-sm-6">Последнее прохождение:</dt>
                                    <dd class="col-sm-6">@Model.Statistics.LastCompletion.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                                }
                            </dl>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-chart-line text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2">Пока нет завершенных попыток</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="students" role="tabpanel">
        <div class="card mt-4">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-users"></i> Результаты учеников</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Ученик</th>
                                <th>Статус</th>
                                <th>Попыток</th>
                                <th>Лучший результат</th>
                                <th>Последний результат</th>
                                <th>Время</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var studentResult in Model.StudentResults)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-user-graduate text-muted me-2"></i>
                                            <div>
                                                <strong>@studentResult.Student.User.FullName</strong>
                                                @if (!string.IsNullOrEmpty(studentResult.Student.School))
                                                {
                                                    <br>
                                                    <small class="text-muted">@studentResult.Student.School</small>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @if (studentResult.HasCompleted)
                                        {
                                            <span class="badge bg-success">Завершил</span>
                                        }
                                        else if (studentResult.IsInProgress)
                                        {
                                            <span class="badge bg-warning">В процессе</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Не начал</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-info">
                                            @studentResult.AttemptsUsed/@Model.Test.MaxAttempts
                                        </span>
                                    </td>
                                    <td>
                                        @if (studentResult.BestResult != null)
                                        {
                                            var bestGrade = GetGradeFromPercentage(studentResult.BestResult.Percentage);
                                            var bestGradeColor = GetGradeColor(bestGrade);

                                            <div class="result-display">
                                                <div class="d-flex align-items-center gap-2">
                                                    <span class="badge bg-@(studentResult.BestResult.Percentage >= 80 ? "success" : studentResult.BestResult.Percentage >= 60 ? "warning" : "danger")">
                                                        @studentResult.BestResult.Percentage.ToString("F1")%
                                                    </span>
                                                    <span class="grade-badge grade-@bestGradeColor">
                                                        @bestGrade
                                                    </span>
                                                </div>
                                                <small class="text-muted">
                                                    @studentResult.BestResult.Score/@studentResult.BestResult.MaxScore баллов
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.LatestResult != null)
                                        {
                                            var latestGrade = GetGradeFromPercentage(studentResult.LatestResult.Percentage);
                                            var latestGradeColor = GetGradeColor(latestGrade);

                                            <div class="result-display">
                                                <div class="d-flex align-items-center gap-2">
                                                    <span class="badge bg-@(studentResult.LatestResult.Percentage >= 80 ? "success" : studentResult.LatestResult.Percentage >= 60 ? "warning" : "danger")">
                                                        @studentResult.LatestResult.Percentage.ToString("F1")%
                                                    </span>
                                                    <span class="grade-badge grade-@latestGradeColor">
                                                        @latestGrade
                                                    </span>
                                                </div>
                                                <small class="text-muted d-block">
                                                    @studentResult.LatestResult.Score/@studentResult.LatestResult.MaxScore баллов
                                                </small>
                                                <small class="text-muted">
                                                    @studentResult.LatestResult.CompletedAt?.ToString("dd.MM.yyyy")
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.TotalTimeSpent.HasValue)
                                        {
                                            <span>@($"{studentResult.TotalTimeSpent.Value.Minutes:D2}:{studentResult.TotalTimeSpent.Value.Seconds:D2}")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (studentResult.Results.Any())
                                        {
                                            <button type="button" class="btn btn-outline-info btn-sm"
                                                    onclick="showPunctuationStudentDetails(@studentResult.Student.Id, '@studentResult.Student.User.FullName')">
                                                <i class="fas fa-eye"></i> Детали
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="questions" role="tabpanel">
        <div class="mt-4">
            @foreach (var qa in Model.QuestionAnalytics)
            {
                var questionIndex = Model.QuestionAnalytics.IndexOf(qa) + 1;

                <div class="card mb-3 border-0 shadow-sm @(qa.IsMostDifficult ? "border-start border-danger border-3" : qa.IsEasiest ? "border-start border-success border-3" : "")">
                    <div class="card-header bg-transparent border-0 py-3">
                        <div class="row align-items-center">
                            <div class="col">
                                <div class="d-flex align-items-center gap-3">
                                    <span class="badge bg-warning fs-6 px-3 py-2">@questionIndex</span>
                                    <div>
                                        <h6 class="mb-1 fw-bold text-warning">Расстановка знаков препинания</h6>
                                        <small class="text-muted">
                                            Правильно: @(string.IsNullOrEmpty(qa.Question.CorrectPositions) ? "Без запятых" : qa.Question.CorrectPositions) (@qa.Question.Points б.)
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="text-end">
                                    @if (qa.TotalAnswers > 0)
                                    {
                                        <div class="h4 mb-0 text-@(qa.SuccessRate >= 80 ? "success" : qa.SuccessRate >= 60 ? "warning" : "danger")">
                                            @qa.SuccessRate.ToString("F0")%
                                        </div>
                                        <small class="text-muted">@qa.CorrectAnswers/@qa.TotalAnswers</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">—</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-body pt-2 pb-3">
                        <div class="mb-3 p-3 bg-light rounded">
                            <h6 class="mb-2 text-warning">Предложение:</h6>
                            <div class="sentence-display">@qa.Question.SentenceWithNumbers</div>
                        </div>

                        @if (!string.IsNullOrEmpty(qa.Question.PlainSentence))
                        {
                            <div class="mb-3 p-3 bg-success bg-opacity-10 rounded border-start border-success border-3">
                                <h6 class="mb-2 text-success">Правильный вариант:</h6>
                                <div class="fw-bold">@qa.Question.PlainSentence</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(qa.Question.Hint))
                        {
                            <div class="mb-3 p-3 bg-info bg-opacity-10 rounded border-start border-info border-3">
                                <h6 class="mb-2 text-info"><i class="fas fa-lightbulb"></i> Подсказка:</h6>
                                <small>@qa.Question.Hint</small>
                            </div>
                        }

                        @if (qa.CommonMistakes.Any())
                        {
                            <div class="mt-3">
                                <h6 class="text-danger"><i class="fas fa-exclamation-triangle"></i> Частые ошибки:</h6>
                                <div class="row g-2">
                                    @foreach (var mistake in qa.CommonMistakes.Take(4))
                                    {
                                        <div class="col-md-6">
                                            <div class="p-2 bg-light rounded border-start border-danger border-2">
                                                <div class="d-flex justify-content-between align-items-center mb-1">
                                                    <span class="fw-bold text-danger">"@mistake.IncorrectAnswer"</span>
                                                    <small class="badge bg-danger">@mistake.Count</small>
                                                </div>
                                                <div class="students-minimal">
                                                    @foreach (var name in mistake.StudentNames)
                                                    {
                                                        <span class="student-tag">@name</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                @if (qa.CommonMistakes.Count > 4)
                                {
                                    <div class="text-center mt-2">
                                        <small class="text-muted">и еще @(qa.CommonMistakes.Count - 4) вариантов ошибок</small>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@await Html.PartialAsync("_StudentDetailsModal")

@section Styles {
    <link rel="stylesheet" href="~/css/test-analytics.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
}

@functions {
    int GetGradeFromPercentage(double percentage)
    {
        if (percentage >= 91) return 5;
        if (percentage >= 76) return 4;
        if (percentage >= 61) return 3;
        return 2;
    }

    string GetGradeColor(int grade)
    {
        return grade switch
        {
            5 => "excellent",
            4 => "good",
            3 => "satisfactory",
            2 => "unsatisfactory",
            _ => "unsatisfactory"
        };
    }
}

@section Scripts {
    <script src="~/js/layout.js" asp-append-version="true"></script>
    <script src="~/js/test-analytics.js" asp-append-version="true"></script>

    <script>
        // Специфичная функция для пунктуации
        function showPunctuationStudentDetails(studentId, studentName) {
            loadPunctuationStudentDetails(studentId, studentName, @Model.Test.Id);
        }

        // Для совместимости
        function showStudentDetails(studentId, studentName) {
            showPunctuationStudentDetails(studentId, studentName);
        }

        // Загрузка данных для пунктуации (специфичный URL и обработка)
        function loadPunctuationStudentDetails(studentId, studentName, testId) {
            console.log('Loading punctuation student details for:', studentId, 'test:', testId);

            // Используем общие методы
            window.testAnalytics.resetModalState();

            const nameElement = document.getElementById('studentModalName');
            if (nameElement) {
                nameElement.textContent = studentName;
            }

            window.testAnalytics.showLoading();
            $('#studentDetailsModal').modal('show');

            // СПЕЦИФИЧНЫЙ URL для пунктуации
            fetch(`/TestAnalytics/GetPunctuationStudentDetails?studentId=${studentId}&testId=${testId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: Ошибка загрузки данных`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Punctuation data received:', data);
                displayPunctuationStudentDetails(data);
            })
            .catch(error => {
                console.error('Error loading punctuation student details:', error);
                window.testAnalytics.showError(error.message);
            });
        }

        // СПЕЦИФИЧНОЕ отображение данных для пунктуации
        function displayPunctuationStudentDetails(data) {
            // Используем общий метод для основных данных
            window.testAnalytics.displayBasicStudentInfo(data);

            // СПЕЦИФИЧНАЯ логика для пунктуации
            displayPunctuationMistakesAnalysis(data.mistakes || []);

            // Показываем контент
            const contentElement = document.getElementById('studentModalContent');
            if (contentElement) {
                contentElement.style.display = 'block';
            }
        }

        // СПЕЦИФИЧНЫЙ анализ ошибок для пунктуации
        function displayPunctuationMistakesAnalysis(mistakes) {
            const container = document.getElementById('studentMistakes');
            if (!container) return;

            if (!mistakes || mistakes.length === 0) {
                container.innerHTML = '<p class="text-success"><i class="fas fa-check-circle"></i> Ошибок не найдено! Отличная работа!</p>';
                return;
            }

            let html = '<div class="row g-2">';
            mistakes.forEach(mistake => {
                html += `<div class="col-md-6 mb-2">
                    <div class="p-2 bg-light rounded border-start border-danger border-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold text-danger">"${mistake.incorrectAnswer || 'Пустой ответ'}"</span>
                            <small class="badge bg-danger">${mistake.count}</small>
                        </div>
                        <div class="mt-1">
                            <small class="text-muted d-block">Правильно: <strong class="text-success">${mistake.correctAnswer}</strong></small>
                            <small class="text-muted">Предложение: ${mistake.sentenceWithNumbers}</small>
                        </div>
                    </div>
                </div>`;
            });
            html += '</div>';
            container.innerHTML = html;
        }
    </script>
}
