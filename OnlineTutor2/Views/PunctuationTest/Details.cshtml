@model OnlineTutor2.Models.PunctuationTest
@{
    ViewData["Title"] = $"Тест: {Model.Title}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-controller="Test" asp-action="Category" asp-route-id="5">Тесты на пунктуацию</a>
                </li>
                <li class="breadcrumb-item active">@Model.Title</li>
            </ol>
        </nav>
        <h2>
            <i class="fas fa-exclamation text-warning"></i> @Model.Title
            <span class="badge bg-@(Model.IsActive ? "success" : "secondary") ms-2">
                @(Model.IsActive ? "Активный" : "Неактивный")
            </span>
        </h2>
        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <p class="text-muted">@Model.Description</p>
        }
    </div>
    <div>
        <a asp-controller="Test" asp-action="Category" asp-route-id="2" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Назад к списку
        </a>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-question-circle text-warning" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-warning">@Model.Questions.Count</h4>
                <small class="text-muted">Вопросов</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-clock text-info" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-info">@Model.TimeLimit</h4>
                <small class="text-muted">Минут на тест</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-redo text-primary" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-primary">@Model.MaxAttempts</h4>
                <small class="text-muted">Попыток на тест</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-users text-success" style="font-size: 2rem;"></i>
                <h4 class="mt-2 text-success">@Model.TestResults.Count</h4>
                <small class="text-muted">Прохождений</small>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0"><i class="fas fa-cog"></i> Настройки теста</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <dl class="row">
                    @if (Model.Class != null)
                    {
                        <dt class="col-sm-4">Назначен классу:</dt>
                        <dd class="col-sm-8">
                            <span class="badge bg-info">@Model.Class.Name</span>
                        </dd>
                    }
                    else
                    {
                        <dt class="col-sm-4">Доступность:</dt>
                        <dd class="col-sm-8">Всем ученикам</dd>
                    }

                    <dt class="col-sm-4">Подсказки:</dt>
                    <dd class="col-sm-8">
                        <span class="badge bg-@(Model.ShowHints ? "success" : "secondary")">
                            @(Model.ShowHints ? "Включены" : "Отключены")
                        </span>
                    </dd>

                    <dt class="col-sm-4">Показ ответов:</dt>
                    <dd class="col-sm-8">
                        <span class="badge bg-@(Model.ShowCorrectAnswers ? "success" : "secondary")">
                            @(Model.ShowCorrectAnswers ? "Включен" : "Отключен")
                        </span>
                    </dd>
                </dl>
            </div>
            <div class="col-md-6">
                <dl class="row">
                    @if (Model.StartDate.HasValue)
                    {
                        <dt class="col-sm-4">Дата начала:</dt>
                        <dd class="col-sm-8">@Model.StartDate.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                    }

                    @if (Model.EndDate.HasValue)
                    {
                        <dt class="col-sm-4">Дата окончания:</dt>
                        <dd class="col-sm-8">@Model.EndDate.Value.ToString("dd.MM.yyyy HH:mm")</dd>
                    }

                    <dt class="col-sm-4">Создан:</dt>
                    <dd class="col-sm-8">@Model.CreatedAt.ToString("dd.MM.yyyy HH:mm")</dd>
                </dl>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="fas fa-list"></i> Вопросы теста (@Model.Questions.Count)
        </h5>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                <i class="fas fa-ellipsis-v"></i>
            </button>
            <ul class="dropdown-menu">
                <li><a asp-action="AddQuestion" asp-route-id="@Model.Id" class="dropdown-item"><i class="fas fa-plus"></i> Добавить вопрос</a></li>
                <li><a asp-action="ImportQuestions" asp-route-id="@Model.Id" class="dropdown-item"><i class="fas fa-file-import"></i> Импорт</a></li>
                <li><a asp-action="Edit" asp-route-id="@Model.Id" class="dropdown-item"><i class="fas fa-edit"></i> Редактировать</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" asp-controller="TestAnalytics" asp-action="Punctuation" asp-route-id="@Model.Id"><i class="fas fa-chart-bar"></i> Аналитика</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#"><i class="fas fa-copy"></i> Дублировать</a></li>
                <li><a class="dropdown-item" href="#"><i class="fas fa-play"></i> Предварительный просмотр</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a asp-action="Delete" asp-route-id="@Model.Id" class="dropdown-item text-danger"><i class="fas fa-trash"></i> Удалить</a></li>
            </ul>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Questions.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 50px;">#</th>
                            <th>Вопрос</th>
                            <th>Ответ</th>
                            <th style="width: 80px;">Баллы</th>
                            <th style="width: 120px;">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var question in Model.Questions.OrderBy(q => q.OrderIndex))
                        {
                            <tr>
                                <td>
                                    <span class="badge bg-warning text-dark">@question.OrderIndex</span>
                                </td>
                                <td>
                                    <div class="question-preview">
                                        @if (question.SentenceWithNumbers.Length > 100)
                                        {
                                            <span class="text-muted">@question.SentenceWithNumbers.Substring(0, 100)...</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">@question.SentenceWithNumbers</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(question.CorrectPositions))
                                    {
                                        <span class="badge bg-success">@question.CorrectPositions</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Без запятых</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">@question.Points</span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-outline-info btn-sm"
                                                data-bs-toggle="modal"
                                                data-bs-target="#questionModal"
                                                onclick="showQuestionDetails(@question.Id, '@Html.Raw(Html.Encode(question.SentenceWithNumbers))', '@question.CorrectPositions', '@Html.Raw(Html.Encode(question.PlainSentence))', '@Html.Raw(Html.Encode(question.Hint))', @question.Points)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-primary btn-sm"
                                                onclick="editQuestion(@question.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                                onclick="deleteQuestion(@question.Id, '@Html.Raw(Html.Encode(question.SentenceWithNumbers.Length > 50 ? question.SentenceWithNumbers.Substring(0, 50) + "..." : question.SentenceWithNumbers))')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-question-circle text-muted" style="font-size: 4rem;"></i>
                <h4 class="mt-3 text-muted">Вопросов пока нет</h4>
                <p class="text-muted">Добавьте первый вопрос в тест</p>
                <div class="mt-3">
                    <a asp-action="AddQuestion" asp-route-id="@Model.Id" class="btn btn-warning me-2">
                        <i class="fas fa-plus"></i> Добавить вопрос
                    </a>
                    <a asp-action="ImportQuestions" asp-route-id="@Model.Id" class="btn btn-outline-warning">
                        <i class="fas fa-file-import"></i> Импорт из Excel
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@if (Model.TestResults.Any())
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-chart-line"></i> Последние прохождения
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Ученик</th>
                            <th>Дата</th>
                            <th>Результат</th>
                            <th>Статус</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in Model.TestResults.OrderByDescending(tr => tr.StartedAt).Take(5))
                        {
                            <tr>
                                <td>@result.Student.User.FullName</td>
                                <td>@result.StartedAt.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>
                                    @if (result.IsCompleted)
                                    {
                                        var grade = GetGradeFromPercentage(result.Percentage);
                                        var gradeColor = GetGradeColor(grade);

                                        <div class="d-flex align-items-center gap-2">
                                            <span class="badge bg-@(result.Percentage >= 80 ? "success" : result.Percentage >= 60 ? "warning" : "danger")">
                                                @result.Percentage.ToString("F1")%
                                            </span>
                                            <span class="grade-badge grade-@gradeColor">
                                                @grade
                                            </span>
                                        </div>
                                        <small class="text-muted">@result.Score/@result.MaxScore баллов</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (result.IsCompleted)
                                    {
                                        <span><i class="fas fa-check-circle text-success"></i> Завершен</span>
                                    }
                                    else
                                    {
                                        <span><i class="fas fa-clock text-warning"></i> В процессе</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (Model.TestResults.Count > 5)
            {
                <div class="text-center mt-3">
                    <a href="#" class="btn btn-outline-info">
                        <i class="fas fa-chart-bar"></i> Посмотреть всю аналитику
                    </a>
                </div>
            }
        </div>
    </div>
}


<div class="modal fade" id="questionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-question-circle"></i> Детали вопроса
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label"><strong>Предложение с номерами позиций:</strong></label>
                    <div class="p-3 bg-light rounded">
                        <span class="h6 text-warning" id="modalSentenceWithNumbers"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label"><strong>Правильные позиции:</strong></label>
                        <div class="p-2 bg-success text-white rounded text-center">
                            <span class="h6" id="modalCorrectPositions"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label"><strong>Баллы:</strong></label>
                        <div class="p-2 bg-info text-white rounded text-center">
                            <span class="h6" id="modalPoints"></span>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label"><strong>Предложение с правильной пунктуацией:</strong></label>
                    <div class="p-3 bg-light rounded">
                        <span id="modalPlainSentence"></span>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label"><strong>Подсказка:</strong></label>
                    <div class="p-3 bg-light rounded">
                        <span id="modalHint"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="button" class="btn btn-warning" onclick="editQuestionFromModal()">
                    <i class="fas fa-edit"></i> Редактировать
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .btn-group {
            max-width: 50px;
        }

        .grade-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            font-size: 0.7rem;
            font-weight: bold;
            color: white;
        }

        .grade-excellent {
            background-color: #28a745;
        }

        .grade-good {
            background-color: #17a2b8;
        }

        .grade-satisfactory {
            background-color: #ffc107;
            color: #212529;
        }

        .grade-unsatisfactory {
            background-color: #dc3545;
        }

        .question-preview {
            font-size: 0.9rem;
            line-height: 1.4;
        }
    </style>
}

@functions {
    int GetGradeFromPercentage(double percentage)
    {
        if (percentage >= 91) return 5;
        if (percentage >= 76) return 4;
        if (percentage >= 61) return 3;
        return 2;
    }

    string GetGradeColor(int grade)
    {
        return grade switch
        {
            5 => "excellent",
            4 => "good",
            3 => "satisfactory",
            2 => "unsatisfactory",
            _ => "unsatisfactory"
        };
    }
}

@section Scripts {
    <script src="~/js/layout.js" asp-append-version="true"></script>

    <script>
        let currentQuestionId = null;

        function showQuestionDetails(id, sentenceWithNumbers, correctPositions, plainSentence, hint, points) {
            currentQuestionId = id;
            document.getElementById('modalSentenceWithNumbers').textContent = sentenceWithNumbers;
            document.getElementById('modalCorrectPositions').textContent = correctPositions || 'Без запятых';
            document.getElementById('modalPlainSentence').textContent = plainSentence || 'Не указано';
            document.getElementById('modalHint').textContent = hint || 'Подсказка не указана';
            document.getElementById('modalPoints').textContent = points;
        }

        function editQuestion(questionId) {
            window.location.href = '@Url.Action("EditQuestion")?id=' + questionId;
        }

        function editQuestionFromModal() {
            if (currentQuestionId) {
                editQuestion(currentQuestionId);
            }
        }

        function deleteQuestion(questionId, sentencePreview) {
            if (confirm(`Вы уверены, что хотите удалить вопрос "${sentencePreview}"?\n\nВнимание: Если на этот вопрос уже отвечали ученики, удаление будет невозможно.`)) {
                fetch('@Url.Action("DeleteQuestion")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(questionId)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification(data.message, 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 5000);
                    } else {
                        showNotification(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Произошла ошибка при удалении вопроса', 'error');
                });
            }
        }

        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle';

            const notification = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    <i class="${icon} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', notification);

            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                if (alerts.length > 0) {
                    alerts[alerts.length - 1].remove();
                }
            }, 5000);
        }

        // Инициализация сортировки вопросов (drag & drop)
           function initializeSortable() {
               const tableBody = document.querySelector('#questionsTable tbody');
               if (tableBody && typeof Sortable !== 'undefined') {
                   new Sortable(tableBody, {
                       animation: 150,
                       handle: '.drag-handle',
                       onEnd: function(evt) {
                           updateQuestionOrder();
                       }
                   });
               }
           }

           function updateQuestionOrder() {
               const rows = document.querySelectorAll('#questionsTable tbody tr');
               const questionIds = Array.from(rows).map(row =>
                   parseInt(row.querySelector('[data-question-id]').getAttribute('data-question-id'))
               );

               fetch('@Url.Action("ReorderQuestions")', {
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json',
                       'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                   },
                   body: JSON.stringify({
                       testId: @Model.Id,
                       questionIds: questionIds
                   })
               })
               .then(response => response.json())
               .then(data => {
                   if (data.success) {
                       showNotification('Порядок вопросов обновлен', 'success');
                       // Обновляем номера в таблице
                       rows.forEach((row, index) => {
                           const badge = row.querySelector('.badge');
                           if (badge) {
                               badge.textContent = index + 1;
                           }
                       });
                   } else {
                       showNotification(data.message, 'error');
                       window.location.reload(); // Перезагружаем при ошибке
                   }
               });
           }

           // Инициализация при загрузке страницы
           document.addEventListener('DOMContentLoaded', function() {
               initializeSortable();
           });
    </script>
    @Html.AntiForgeryToken()
}
